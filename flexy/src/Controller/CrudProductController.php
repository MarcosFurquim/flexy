<?php
namespace App\Controller;

use App\Entity\Product;
use App\Repository\ProductRepository;
use App\Repository\TagRepository;
use App\Entity\Tag;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class CrudProductController extends AbstractController
{
    /**
     * @return string
     */
    private function generateUniqueFileName() {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
    * @Route("/");
    * @Route("/products")
    */
    public function indexProduct(ProductRepository $productRepository) {
        $products = $productRepository->getAll();
        return $this->render('product.template.html.twig', [
            "products" => $products
        ]);
    }
    /**
    * @Route("/tags")
    */
    public function indexTag(TagRepository $tagsRepository) {
        $tags = $tagsRepository->getAll();
        return $this->render('tag.crud.template.html.twig', [
            "tags" => $tags
        ]);
    }
    /**
    * @Route("/products/new")
    */
    public function newView(TagRepository $tagsRepository) {  
        $tags = $tagsRepository->getAll();
        return $this->render('new-product.template.html.twig', [
            "tags" => $tags
        ]);
    }
    /**
    * @Route("/products/createNew")
    */
    public function newProduct(Request $request, EntityManagerInterface $em, TagRepository $tagRepository) {
        if($request) {
            //var_dump($request->files->get('image'));
            // persist the new product
            $product = new Product;
            $product->setTitle($request->get('title'));
            $product->setDescription($request->get('description'));
            $product->setStock($request->get('stock'));
            $tag = $tagRepository->get($request->get('tag'));
            $product->setTag($tag);
            //save image
            $image = $request->files->get('image');
            $file = new File($image);
            $filename =  preg_replace("/[^a-z0-9\_\-\.]/i", '',$request->files->get('image')->getClientOriginalName());
            try {
                $file->move(__DIR__.'/../../public/uploads',$filename);
                $product->setImage($filename);
            } catch (FileException $e) {
                var_dump($e);
                exit;
            }
            
            $em->persist($product);
            $em->flush();
            $response = new RedirectResponse
            (
                'Content',
                Response::HTTP_CREATED,
                array('content-type' => 'text/html')
            );
            $response->setContent('<script>
            alert(\'Product created successful! \');
            window.location.replace("/products");
            </script>');

            // the headers public attribute is a ResponseHeaderBag
            return $response;
        } else {
            return $this->render('new-product.template.html.twig');
        }
    }
    /**
    * @Route("/products/edit/{id}")
    */
    public function editView($id,ProductRepository $productRepository, TagRepository $tagRepository) {
        $product = $productRepository->get($id);
        $tags = $tagRepository->getAll();
        return $this->render('edit-product.template.html.twig', [
            "product" => $product,
            "tags" => $tags
        ]);
    }/**
    * @Route("/products/editProduct")
    */
    public function editProduct(Request $request, EntityManagerInterface $em, ProductRepository $productRepository, TagRepository $tagRepository) {
        $product = $productRepository->get($request->get('idProduct'));
        $product->setTitle($request->get('title'));
        $product->setDescription($request->get('description'));
        $product->setStock($request->get('stock'));
        $tag = $tagRepository->get($request->get('tag'));
        $product->setTag($tag);
        //update image
        $image = $request->files->get('image');
        if(!empty($image)) {
            $file = new File($image);
            $filename =  preg_replace("/[^a-z0-9\_\-\.]/i", '',$request->files->get('image')->getClientOriginalName());
            try {
                $file->move(__DIR__.'/../../public/uploads',$filename);
                $product->setImage($filename);
            } catch (FileException $e) {
                var_dump($e);
                exit;
            }
            $product->setImage($filename);
        }
       $em->persist($product);
       $em->flush();
       $response = new RedirectResponse
            (
                'Content',
                Response::HTTP_CREATED,
                array('content-type' => 'text/html')
            );
       $response->setContent('<script>
       alert(\'Product edited successful! \');
       window.location.replace("/products");
       </script>');

       // the headers public attribute is a ResponseHeaderBag
       return $response;
        
    }
}